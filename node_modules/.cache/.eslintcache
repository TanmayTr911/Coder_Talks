[{"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\index.js":"1","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\App.js":"2","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\pages\\home.js":"3","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\pages\\chats.js":"4","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\auth\\login.js":"5","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\auth\\signup.js":"6","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\Context\\ChatProvider.js":"7","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\Chatbox.js":"8","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\MyChats.js":"9","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\SideDrawer.js":"10","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\ProfileModal.js":"11","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\UserListItem.js":"12","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\ChatLoading.js":"13","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\config\\ChatLogics.js":"14","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\GroupChatModal.js":"15","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\UserBadgeItem.js":"16","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\SingleChat.js":"17","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\UpdateGroupChatModal.js":"18","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\ScrollableChat.js":"19"},{"size":703,"mtime":1661447930862,"results":"20","hashOfConfig":"21"},{"size":324,"mtime":1661019623177,"results":"22","hashOfConfig":"21"},{"size":2111,"mtime":1661019951802,"results":"23","hashOfConfig":"21"},{"size":921,"mtime":1661349292200,"results":"24","hashOfConfig":"21"},{"size":4074,"mtime":1661019845100,"results":"25","hashOfConfig":"21"},{"size":7148,"mtime":1660845468966,"results":"26","hashOfConfig":"21"},{"size":1133,"mtime":1661424606532,"results":"27","hashOfConfig":"21"},{"size":786,"mtime":1661443175483,"results":"28","hashOfConfig":"21"},{"size":4412,"mtime":1661443044881,"results":"29","hashOfConfig":"21"},{"size":7928,"mtime":1661280479607,"results":"30","hashOfConfig":"21"},{"size":2130,"mtime":1661362386168,"results":"31","hashOfConfig":"21"},{"size":928,"mtime":1661283035990,"results":"32","hashOfConfig":"21"},{"size":612,"mtime":1661077796515,"results":"33","hashOfConfig":"21"},{"size":1384,"mtime":1661448643629,"results":"34","hashOfConfig":"21"},{"size":5536,"mtime":1661362954968,"results":"35","hashOfConfig":"21"},{"size":577,"mtime":1661191550871,"results":"36","hashOfConfig":"21"},{"size":9269,"mtime":1661577760605,"results":"37","hashOfConfig":"21"},{"size":8148,"mtime":1661367414093,"results":"38","hashOfConfig":"21"},{"size":1774,"mtime":1661520797400,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2atnqs",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\index.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\App.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\pages\\home.js",["105","106"],[],"import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  Container,\r\n  Box,\r\n  Text,\r\n  Tab,\r\n  TabList,\r\n  Tabs,\r\n  TabPanels,\r\n  TabPanel,\r\n} from \"@chakra-ui/react\";\r\nimport Signup from \"../auth/signup\";\r\nimport Login from \"../auth/login\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n\r\n  // useEffect(() => {\r\n  //   const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n  //   if (user) history.push(\"/api/chats\");\r\n  // }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        bg=\"#2B4EFF\"\r\n        // bg=\"#ed2849\"\r\n        justifyContent=\"center\"\r\n        p={2}\r\n        borderRadius=\"md\"\r\n        m=\"3% 5% 0% 5%\"\r\n        w=\"100%\"\r\n      >\r\n        <Text\r\n          color=\"white\"\r\n          fontSize=\"3xl\"\r\n          justifyContent=\"center\"\r\n          p=\"0 0 0 34%\"\r\n          fontFamily=\"work sans\"\r\n        >\r\n          Coder-Talks\r\n        </Text>\r\n      </Box>\r\n      <Box\r\n        // bg=\"#a88ff2\"\r\n        // bg=\"#8f72e8\"\r\n        bg=\"balck\"\r\n        justifyContent=\"center\"\r\n        p={2}\r\n        borderRadius=\"md\"\r\n        border=\"2px solid white\"\r\n        m=\"2% 5% 0% 5%\"\r\n        w=\"100%\"\r\n      >\r\n        <Tabs variant=\"enclosed\" colorScheme=\"green\">\r\n          <TabList>\r\n            <Tab\r\n              color=\"white\"\r\n              borderRadius=\"hi\"\r\n              fontSize=\"xl\"\r\n              w=\"30%\"\r\n              _selected={{ color: \"white\", bg: \"#2B4EFF\" }}\r\n            >\r\n              Login\r\n            </Tab>\r\n            <Tab\r\n              color=\"white\"\r\n              borderRadius=\"hi\"\r\n              fontSize=\"xl\"\r\n              w=\"30%\"\r\n              _selected={{ color: \"white\", bg: \"#2B4EFF\" }}\r\n            >\r\n              SignUp\r\n            </Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\pages\\chats.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\auth\\login.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\auth\\signup.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\Context\\ChatProvider.js",["107","108"],[],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  // const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  const [fet, setfet] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        // notification,\r\n        // setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\Chatbox.js",["109"],[],"import React from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\n// import \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = (fetchAgain, setFetchAgain) => {\r\n  // const { selectedChat } = ChatState();\r\n  return (\r\n    <Box\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      bgImage=\" linear-gradient(to right,#17151f,#040621, #17151f)\"\r\n      w={{ base: \"100%\", md: \"72%\" }}\r\n      minH=\"85vh\"\r\n      h=\"100%\"\r\n      borderRadius=\"lg\"\r\n      border=\"1px solid white\"\r\n      marginLeft={{ base: \"0%\", md: \"28%\" }}\r\n      marginTop={{ md: \"-38.5%\", base: \"0%\" }}\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\MyChats.js",["110","111"],[],"import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain, setFetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats, fet, setfet } =\r\n    ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const data = await fetch(`http://localhost:3500/api/chat`, config);\r\n      const res = await data.json();\r\n\r\n      console.log(res);\r\n      setChats(res);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    console.log(\"helloooooo\");\r\n    fetchChats();\r\n  }, [fet]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      // h=\"97%\"\r\n      w={{ md: \"27%\", base: \"100%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      bg=\"\"\r\n      color=\"white\"\r\n      minH=\"85vh\"\r\n      // minH={{ base: \"60vh\", md: \"85vh\" }}\r\n      // h={{ base: \"40vh\", md: \"85vh\" }}\r\n      boxSize=\"border-box\"\r\n      // w=\"27%\"\r\n    >\r\n      <GroupChatModal>\r\n        <Button\r\n          d=\"flex\"\r\n          h=\"6.5%\"\r\n          marginLeft=\"55%\"\r\n          marginTop=\"0px\"\r\n          p=\"8px\"\r\n          bg=\"#4d8ef7\"\r\n          c=\"white\"\r\n          fontSize=\"14px\"\r\n          // border=\"1px solid white\"\r\n          _hover={{ color: \"black\", bg: \"white\" }}\r\n          rightIcon={<AddIcon />}\r\n        >\r\n          New Group Chat\r\n        </Button>\r\n      </GroupChatModal>\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"fit-content\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"black\"\r\n        border=\"1px solid white\"\r\n        w=\"100%\"\r\n        margin=\"2px\"\r\n        marginLeft=\"0.2px\"\r\n        borderRadius=\"lg\"\r\n        h=\"65vh\"\r\n        overflowY=\"scroll\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#4d8ef7\" : \"#171717\"}\r\n                color={selectedChat === chat ? \"white\" : \"white\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {/* {chat.isGroup === true ? setFetchAgain(!fetchAgain) : \"\"} */}\r\n                  {/* {if(chat.isGroup)} */}\r\n                  {/* {console.log(chat._id)} */}\r\n                  {/* fetchAgain; */}\r\n                  {/* {chat.isGroup === false ? console.log(\"hell\") : fetchAgain} */}\r\n                  {chat.isGroup === false\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\SideDrawer.js",["112","113"],[],"import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\n// // import NotificationBadge from \"react-notification-badge\";\r\n// // import { Effect } from \"react-notification-badge\";\r\n// // import { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"./UserListItem\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { color } from \"@chakra-ui/react\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    // notification,\r\n    // setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (search === \"\") {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const data = await fetch(\r\n        `http://localhost:3500/api/user?search=${search}`,\r\n        config\r\n      );\r\n      const res = await data.json();\r\n\r\n      setLoading(false);\r\n      setSearchResult(res);\r\n\r\n      // console.log(res);\r\n    } catch {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n        body: JSON.stringify({ userId }),\r\n      };\r\n\r\n      const data = await fetch(\r\n        `http://localhost:3500/api/chat`,\r\n\r\n        config\r\n      );\r\n\r\n      const res = await data.json();\r\n      //  const { data } = await fetch(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === res._id)) setChats([res, ...chats]);\r\n      setSelectedChat(res);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSearch();\r\n  }, [search]);\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyItems=\"space-around\"\r\n        alignItems=\"center\"\r\n        bg=\"black\"\r\n        backgroundImage=\"black\"\r\n        mw=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"0.5px\"\r\n        borderRadius=\"10px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" color=\"gray\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text\r\n          fontSize=\"3xl\"\r\n          fontFamily=\"Work sans\"\r\n          display=\"inline\"\r\n          color=\"\r\n#f5f5f5\r\n\r\n\"\r\n          marginLeft=\"30%\"\r\n          marginRight=\"31%\"\r\n        >\r\n          Coder_T@lks\r\n        </Text>\r\n        <Menu>\r\n          <MenuButton p={1}>\r\n            {/* <NotificationBadge\r\n              count={notification.length}\r\n              effect={Effect.SCALE}\r\n            /> */}\r\n            <BellIcon fontSize=\"3xl\" m={1} color=\"white\" marginLeft=\"20%\" />\r\n          </MenuButton>\r\n          {/* <MenuList pl={2}>\r\n            {!notification.length && \"No New Messages\"}\r\n            {notification.map((notif) => (\r\n              <MenuItem\r\n                key={notif._id}\r\n                onClick={() => {\r\n                  setSelectedChat(notif.chat);\r\n                  setNotification(notification.filter((n) => n !== notif));\r\n                }}\r\n              >\r\n                {notif.chat.isGroupChat\r\n                  ? `New Message in ${notif.chat.chatName}`\r\n                  : `New Message from ${getSender(user, notif.chat.users)}`}\r\n              </MenuItem>\r\n            ))}\r\n          </MenuList> */}\r\n        </Menu>\r\n\r\n        <Menu>\r\n          <MenuButton\r\n            as={Button}\r\n            bg=\"#4d8ef7\"\r\n            _hover={{ color: \"black\", bg: \"white\" }}\r\n            color=\"white\"\r\n            // marginLeft=\"20%\"\r\n            rightIcon={<ChevronDownIcon />}\r\n          >\r\n            <Avatar\r\n              size=\"sm\"\r\n              cursor=\"pointer\"\r\n              name={user.name}\r\n              src={user.pic}\r\n            />\r\n          </MenuButton>\r\n          <MenuList\r\n            bg=\"#black\"\r\n            color=\"white\"\r\n            borderRadius=\"0\"\r\n\r\n            // _hover={{ bg: \"blue.500\", color: \" white\" }}\r\n          >\r\n            <ProfileModal user={user}>\r\n              <MenuItem _hover={{ color: \" black\" }}>My Profile</MenuItem>{\" \"}\r\n            </ProfileModal>\r\n            <MenuDivider />\r\n            <MenuItem _hover={{ color: \" black\" }} onClick={logoutHandler}>\r\n              Logout\r\n            </MenuItem>\r\n          </MenuList>\r\n        </Menu>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen} bg=\"black\">\r\n        <DrawerOverlay />\r\n        <DrawerContent bg=\"black\">\r\n          <DrawerHeader borderBottomWidth=\"1px\" color=\"white\">\r\n            Search Users\r\n          </DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2} color=\"white\">\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => {\r\n                  setSearch(e.target.value);\r\n                }}\r\n              />\r\n              {/* <Button\r\n                bg=\"\"\r\n                onClick={handleSearch}\r\n                margin=\"5px\"\r\n                borderRadius=\"5px\"\r\n                border=\"1px solid white\"\r\n                _hover={{ color: \"black\", bg: \"white \" }}\r\n              >\r\n                Go\r\n              </Button> */}\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((users) => (\r\n                <UserListItem\r\n                  key={users._id}\r\n                  user={users}\r\n                  handleFunction={() => accessChat(users._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n\r\n// import React from \"react\";\r\n\r\n// const SideDrawer = () => {\r\n//   return <div>SideDrawer</div>;\r\n// };\r\n\r\n// export default SideDrawer;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\ProfileModal.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\UserListItem.js",["114"],[],"import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction, user }) => {\r\n  //   const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      _hover={{\r\n        background: \"#4d8ef7\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"white\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      bg=\"#171717\"\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\ChatLoading.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\config\\ChatLogics.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\GroupChatModal.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\UserBadgeItem.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\SingleChat.js",["115","116","117","118"],["119"],"import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import \"./styles.css\";\r\n\r\nimport { ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport { Button, color, IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animation/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:3500\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    // console.log(\"what happend\");\r\n    socket.on(\"connected\", () => {\r\n      setSocketConnected(true);\r\n    });\r\n\r\n    socket.on(\"typing\", () => {\r\n      setIsTyping(true);\r\n    });\r\n\r\n    socket.on(\"stop typing\", () => {\r\n      setIsTyping(false);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"msg received\", (newMsg) => {\r\n      if (!selectedChatCompare || selectedChatCompare._id !== newMsg.chat._id) {\r\n        // do nothing\r\n      } else {\r\n        setMessages([...messages, newMsg]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const data = await fetch(\r\n        `http://localhost:3500/api/msg/${selectedChat._id}`,\r\n        config\r\n      );\r\n\r\n      const res = await data.json();\r\n\r\n      console.log(res);\r\n      setMessages(res);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (newMessage.length === 0) {\r\n      return;\r\n    }\r\n    try {\r\n      const config = {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n\r\n        body: JSON.stringify({\r\n          content: newMessage,\r\n          chatId: selectedChat,\r\n        }),\r\n      };\r\n\r\n      setNewMessage(\"\");\r\n      let data = await fetch(`http://localhost:3500/api/msg`, config);\r\n\r\n      let res = await data.json();\r\n\r\n      // console.log(res);\r\n      socket.emit(\"new message\", res);\r\n\r\n      setMessages([...messages, res]);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to send the Message\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) {\r\n      console.log(\"connect\");\r\n      return;\r\n    }\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <Box\r\n              bg=\"black\"\r\n              p=\"4px 10px 10px 10px\"\r\n              m=\"0px\"\r\n              color=\"white\"\r\n              border=\"1px solid white\"\r\n              borderRadius=\"8px\"\r\n              boxShadow=\"1px 7px #414142 \"\r\n            >\r\n              <IconButton\r\n                d={{ base: \"flex\", md: \"none\" }}\r\n                icon={<ArrowBackIcon />}\r\n                onClick={() => setSelectedChat(\"\")}\r\n                color=\"black\"\r\n              />\r\n\r\n              {\r\n                /* {messages && */\r\n                !selectedChat.isGroup ? (\r\n                  <span className=\"title\">\r\n                    {getSender(user, selectedChat.users)}\r\n\r\n                    <span className=\"prof\">\r\n                      <ProfileModal\r\n                        user={getSenderFull(user, selectedChat.users)}\r\n                      />\r\n                    </span>\r\n                  </span>\r\n                ) : (\r\n                  <span className=\"title\">\r\n                    {/* icon={<UserIcon />}? */}\r\n                    {selectedChat.chatName.toUpperCase()}\r\n\r\n                    <span className=\"prof2\">\r\n                      <UpdateGroupChatModal\r\n                        fetchMessages={fetchMessages}\r\n                        fetchAgain={fetchAgain}\r\n                        setFetchAgain={setFetchAgain}\r\n                      />\r\n                    </span>\r\n                  </span>\r\n                )\r\n              }\r\n            </Box>\r\n          </Text>\r\n          <Box\r\n            p={3}\r\n            paddingTop=\"5px\"\r\n            bg=\"\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"auto\"\r\n            className=\"msgbx\"\r\n            h=\"70vh\"\r\n            color=\"white\"\r\n          >\r\n            {loading ? (\r\n              <Spinner size=\"xl\" w={7} h={7} alignSelf=\"center\" m=\"0\" />\r\n            ) : (\r\n              <div>\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onSubmit={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{\r\n                      marginBottom: 15,\r\n                      marginLeft: 0,\r\n                      background: \"black\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                className=\"inp\"\r\n                // mt=\"63vh\"\r\n                w=\"58%\"\r\n                position=\"fixed\"\r\n                bottom=\"20px\"\r\n                mt=\"5px\"\r\n                // boxSize=\"border-box\"\r\n                onChange={typingHandler}\r\n                zIndex=\"2\"\r\n              />\r\n              <Button\r\n                onClick={sendMessage}\r\n                position=\"fixed\"\r\n                bottom=\"20px\"\r\n                mt=\"5px\"\r\n                bg=\"#4d8ef7\"\r\n                ml=\"59%\"\r\n                _hover={{ color: \"black\", bg: \"white\" }}\r\n                fontSize=\"xl\"\r\n                fontFamily=\"Work sans\"\r\n                zIndex=\"2\"\r\n              >\r\n                send\r\n                <ArrowRightIcon ml=\"15px\" />\r\n              </Button>\r\n            </FormControl>\r\n            <Box\r\n              position=\"fixed\"\r\n              bottom=\"10px\"\r\n              mt=\"5px\"\r\n              bg=\"black\"\r\n              w=\"70.75%\"\r\n              h=\"60px\"\r\n              ml=\"-1%\"\r\n              border=\"1px solid white\"\r\n              borderRadius=\"8px\"\r\n              // zIndex=\"-1\"\r\n            ></Box>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box margin=\"20% 0% 0% 13%\" h=\"100%\">\r\n          <Text fontSize=\"5xl\" pb={3} fontFamily=\"Work sans\" color=\"silver\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\UpdateGroupChatModal.js",[],[],"C:\\Users\\tanma\\Desktop\\web\\NODE_FINAL_PROJECT\\Chat_App\\frontend\\src\\components\\ScrollableChat.js",["120","121","122"],[],"import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#1202f0\" : \"#3ede69\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n                marginBottom: \"5px\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n",{"ruleId":"123","severity":1,"message":"124","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":19},{"ruleId":"123","severity":1,"message":"127","line":18,"column":9,"nodeType":"125","messageId":"126","endLine":18,"endColumn":16},{"ruleId":"123","severity":1,"message":"128","line":12,"column":10,"nodeType":"125","messageId":"126","endLine":12,"endColumn":13},{"ruleId":"123","severity":1,"message":"129","line":12,"column":15,"nodeType":"125","messageId":"126","endLine":12,"endColumn":21},{"ruleId":"123","severity":1,"message":"130","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":19},{"ruleId":"123","severity":1,"message":"129","line":15,"column":70,"nodeType":"125","messageId":"126","endLine":15,"endColumn":76},{"ruleId":"131","severity":1,"message":"132","line":51,"column":6,"nodeType":"133","endLine":51,"endColumn":11,"suggestions":"134"},{"ruleId":"123","severity":1,"message":"135","line":33,"column":10,"nodeType":"125","messageId":"126","endLine":33,"endColumn":15},{"ruleId":"131","severity":1,"message":"136","line":136,"column":6,"nodeType":"133","endLine":136,"endColumn":14,"suggestions":"137"},{"ruleId":"123","severity":1,"message":"130","line":3,"column":10,"nodeType":"125","messageId":"126","endLine":3,"endColumn":19},{"ruleId":"123","severity":1,"message":"135","line":7,"column":18,"nodeType":"125","messageId":"126","endLine":7,"endColumn":23},{"ruleId":"123","severity":1,"message":"138","line":40,"column":48,"nodeType":"125","messageId":"126","endLine":40,"endColumn":60},{"ruleId":"123","severity":1,"message":"139","line":40,"column":62,"nodeType":"125","messageId":"126","endLine":40,"endColumn":77},{"ruleId":"131","severity":1,"message":"140","line":58,"column":6,"nodeType":"133","endLine":58,"endColumn":8,"suggestions":"141"},{"ruleId":"131","severity":1,"message":"142","line":174,"column":6,"nodeType":"133","endLine":174,"endColumn":20,"suggestions":"143","suppressions":"144"},{"ruleId":"123","severity":1,"message":"145","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":5,"column":17,"nodeType":"125","messageId":"126","endLine":5,"endColumn":26},{"ruleId":"123","severity":1,"message":"146","line":5,"column":28,"nodeType":"125","messageId":"126","endLine":5,"endColumn":34},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'fet' is assigned a value but never used.","'setfet' is assigned a value but never used.","'ChatState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'color' is defined but never used.","React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["148"],"'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["150"],["151"],"'ScrollToBottom' is defined but never used.","'useRef' is defined but never used.",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"kind":"160","justification":"161"},"Update the dependencies array to be: [fet, fetchChats]",{"range":"162","text":"163"},"Update the dependencies array to be: [handleSearch, search]",{"range":"164","text":"165"},"Update the dependencies array to be: [user]",{"range":"166","text":"167"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"168","text":"169"},"directive","",[1437,1442],"[fet, fetchChats]",[3534,3542],"[handleSearch, search]",[1991,1993],"[user]",[4695,4709],"[fetchMessages, selectedChat]"]